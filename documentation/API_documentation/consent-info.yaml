openapi: 3.0.3
info:
  title: Consent Info API
  description: |
    
    The Consent Info API enables to verify the Consent status of a specific User to the API Consumer for the requested scope(s) and Purpose. When the Consent is required for the requested scope(s) and Purpose, but has not been provided by the User, the API also offers a mechanism for the API Consumer to request Consent from the User.

    # Introduction

    **TBC**

    # Relevant terms and definitions

    * **Consent**: An explicit opt-in action that the User takes to allow processing of Personal Data. Consent grants the API Consumer access to a set of scopes related to the User for a specific Purpose.
    * **Purpose**: The reason for which Personal Data will be processed by an API Consumer. CAMARA defines a standard set of Purposes which can be used by API Consumers to specify the reason for their intended Personal Data processing.
    * **TBC**: TBC

    # API Functionality

    This API enables an API Consumer to determine whether user Consent is required, in the applicable legislation, for the requested actions based on the provide scope(s) and Purpose. NOTE: It may be required more than one User Consent for the requested scope(s) and Purpose (e.g. when the requested scopes are related to multiple APIs).
    
    Specifically, the API:

    * Determines the need for Consent: Evaluates whether user Consent is necessary according to the specified parameters and relevant legal requirements.
    * Provides the current Consent status: If Consent is required, the API returns the current status (e.g., active, revoked, expired...) so the API Consumer can understand the current User's consent status.
    * Offers a Consent Capture URL: If the user has not provided the necessary Consent, the API supplies an API Provider's Consent capture URL where the user can easily complete the Consent process.
    
    Importantly, this API does NOT delegate consent capture to the API Consumer but rather empowers the API Consumer to present the API Providers's Consent capture URL at the most opportune time and place. The actual Consent capture occurs within the API Provider's secure environment, ensuring the User's authentication with the API Provider.

    **TBC**

    # Authorization and authentication

    The "Camara Security and Interoperability Profile" provides details of how an API consumer requests an access token. Please refer to Identity and Consent Management (https://github.com/camaraproject/IdentityAndConsentManagement/) for the released version of the profile.

    The specific authorization flows to be used will be agreed upon during the onboarding process, happening between the API consumer and the API provider, taking into account the declared purpose for accessing the API, whilst also being subject to the prevailing legal framework dictated by local legislation.

    In cases where personal data is processed by the API and users can exercise their rights through mechanisms such as opt-in and/or opt-out, the use of three-legged access tokens is mandatory. This ensures that the API remains in compliance with privacy regulations, upholding the principles of transparency and user-centric privacy-by-design.
    
    # Identifying the phone number from the access token

    This API requires the API consumer to identify a phone number as the subject of the API as follows:
    - When the API is invoked using a two-legged access token, the subject will be identified from the optional `phoneNumber` field, which therefore MUST be provided.
    - When a three-legged access token is used however, this optional identifier MUST NOT be provided, as the subject will be uniquely identified from the access token.

    This approach simplifies API usage for API consumers using a three-legged access token to invoke the API by relying on the information that is associated with the access token and was identified during the authentication process.

    ## Error handling:

    - If the subject cannot be identified from the access token and the optional `phoneNumber` field is not included in the request, then the server will return an error with the `422 MISSING_IDENTIFIER` error code.

    - If the subject can be identified from the access token and the optional `phoneNumber` field is also included in the request, then the server will return an error with the `422 UNNECESSARY_IDENTIFIER` error code. This will be the case even if the same phone number is identified by these two methods, as the server is unable to make this comparison.
    
    # Further info and support

    (FAQs will be added in a later version of the documentation)
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: wip
  x-camara-commonalities: 0.5
servers:
  - url: '{apiRoot}/consent-info/vwip'
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root, defined by the service provider, e.g. `api.example.com` or `api.example.com/somepath`
tags:
  - name: Verify Consent Status
    description: Create a request to verify the Consent status
paths: 
  /verify:
    post:
      summary: Create a request to verify the Consent status
      description: |
        Create a request to verify the Consent status of a specific User to the API Consumer for the requested scope(s) and Purpose. The API Consumer is identified by the `client_id` parameter deduced from the access token.
      operationId: verifyConsentStatus
      security:
        - openId:
          - consent-info:verify
      tags:
        - Verify Consent Status      
      parameters:
        - $ref: '#/components/parameters/x-correlator'
      requestBody:
        required: true
        description:
          Consent status verification request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyConsentStatusRequestBody"
            examples:
              ONE_SCOPE_ONE_API:
                summary: One scope
                description: |
                  Request with one scope corresponding to one API
                value:
                  phoneNumber: "+123456789"
                  scopes:
                    - "location-verification:verify"
                  purpose: "dpv:FraudPreventionAndDetection"
                  requestCaptureUrl: true
              MULTIPLE_SCOPES_ONE_API:
                summary: Multiple scopes for one API
                description: |
                  Request with multiple scopes corresponding to one API
                value:
                  phoneNumber: "+123456789"
                  scopes:
                    - "quality-on-demand:sessions:create"
                    - "quality-on-demand:sessions:read"
                    - "quality-on-demand:sessions:update"
                    - "quality-on-demand:sessions:delete"
                    - "quality-on-demand:sessions:retrieve-by-device"
                  purpose: "dpv:RequestedServiceProvision"
                  requestCaptureUrl: true
              MULTIPLE_SCOPES_MULTIPLE_APIS:
                summary: Multiple scopes for multiple APIs
                description: |
                  Request with multiple scopes corresponding to multiple APIs
                value:
                  phoneNumber: "+123456789"
                  scopes:
                    - "location-verification:verify"
                    - "device-roaming-status:read"
                  purpose: "dpv:FraudPreventionAndDetection"
                  requestCaptureUrl: true
      responses:
        "200":
          description: OK
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyConsentStatusResponseBody"
              examples:
                CONSENT_NOT_REQUIRED:
                  summary: Consent is not required
                  description: |
                    Consent is not required for the requested scope(s) and Purpose
                  value:
                    privacyStatus:
                      - scopes:
                          - "number-verification:verify"
                        purpose: "dpv:LegitimateInterest"
                        consentRequired: false
                CONSENT_REQUIRED_ACTIVE:
                  summary: Consent is required and active
                  description: |
                    Consent is required for the requested scope(s) and Purpose and it is provided by the User
                  value:
                    privacyStatus:
                      - scopes:
                          - "location-verification:verify"
                        purpose: "dpv:FraudPreventionAndDetection"
                        consentRequired: true
                        consentStatus: ACTIVE
                CONSENT_REQUIRED_CAPTURE_URL:
                  summary: Consent is required and capture URL provided
                  description: |
                    Consent is required for the requested scope(s) and Purpose but it is not provided by the User.
                  value:
                    privacyStatus:
                      - scopes:
                          - "location-verification:verify"
                        purpose: "dpv:FraudPreventionAndDetection"
                        consentRequired: true
                        consentStatus: PENDING
                    captureUrl: 'https://example.org/consent-capture-url'
                CONSENT_REQUIRED_MULTIPLE_SCOPES_ONE_API:
                  summary: Multiple scopes for one API
                  description: |
                    Consent is required for the requested scope(s) and Purpose but it is not provided by the User. Request with multiple scopes corresponding to one API. 
                  value:
                    privacyStatus:
                      - scopes:
                        - "quality-on-demand:sessions:create"
                        - "quality-on-demand:sessions:read"
                        - "quality-on-demand:sessions:update"
                        - "quality-on-demand:sessions:delete"
                        - "quality-on-demand:sessions:retrieve-by-device"
                        purpose: "dpv:RequestedServiceProvision"
                        consentRequired: true
                        consentStatus: PENDING
                    captureUrl: 'https://example.org/consent-capture-url'
                CONSENT_REQUIRED_MULTIPLE_SCOPES_MULTIPLE_APIS:
                  summary: Multiple scopes for multiple APIs
                  description: |
                    Consent is required for the requested scope(s) and Purpose but it is not provided by the User. Request with multiple scopes corresponding to multiple APIs.
                  value:
                    privacyStatus:
                      - scopes:
                          - "location-verification:verify"
                        purpose: "dpv:FraudPreventionAndDetection"
                        consentRequired: true
                        consentStatus: PENDING
                      - scopes:
                          - "device-roaming-status:read"
                        purpose: "dpv:FraudPreventionAndDetection"
                        consentRequired: true
                        consentStatus: PENDING
                    captureUrl: 'https://example.org/consent-capture-url'
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/verifyConsentStatus403"
        "404":
          $ref: "#/components/responses/Generic404"
        "422":
          $ref: "#/components/responses/Generic422"
components:
  headers:
    x-correlator:
      description: Correlation id for the different services
      schema:
        type: string
        pattern: ^[a-zA-Z0-9-]{0,55}$
  parameters:
    x-correlator:
      name: x-correlator
      in: header
      description: Correlation id for the different services
      schema:
        type: string
        pattern: ^[a-zA-Z0-9-]{0,55}$
        example: "b4333c46-49c0-4f62-80d7-f0ef930f1c46"
  schemas:
    PhoneNumber:
      type: string
      description: A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, prefixed with '+'.
      pattern: '^\+[1-9][0-9]{4,14}$'
      example: "+123456789" 
    VerifyConsentStatusRequestBody:
      type: object
      required:
        - scopes
        - purpose
        - requestCaptureUrl
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        scopes:
          $ref: "#/components/schemas/Scopes"
        purpose:
          $ref: "#/components/schemas/Purpose"
        requestCaptureUrl:
          type: boolean
          description: |
            A boolean flag indicating whether the API Consumer requests API Provider to return a Consent capture URL.
            * `true` - If set to `true` the API will include a `captureUrl` in the response body if applicable.
            * `false` - The API will omit the consent capture URL from the response.
          example: true
    Scopes:
      type: array
      minItems: 1
      items:
        type: string
      description: |
        List of scopes for which the Consent status is requested. The scope is a string that represents the access rights that the API Consumer is requesting from the User.
      example:
        - "location-verification:verify"      
    Purpose:
      type: string
      description: |
        The reason for which Personal Data will be processed by the API Consumer. CAMARA defines a standard set of Purposes which can be used by API Consumers to specify the reason for their intended Personal Data processing.
      example: "dpv:FraudPreventionAndDetection"
    VerifyConsentStatusResponseBody:
      type: object
      required:
        - privacyStatus
      properties:
        privacyStatus:
          $ref: "#/components/schemas/PrivacyStatus"
        captureUrl:
          type: string
          format: url
          description: |
            URL where the User can provide the necessary Consent. This field is only present when API Consumer requested it and if `consentRequired` is `true` and the `consentStatus` is `PENDING` or `EXPIRED`.
          example: 'https://example.org/consent-capture-url'
    PrivacyStatus:
      type: array
      description: |
        The PrivacyStatus contains the information about the Consent status for the requested scope(s) and Purpose. It may be required more than one User Consent for the requested scope(s) and Purpose (e.g. when the requested scopes are related to multiple APIs).
      items:
        $ref: "#/components/schemas/PrivacyStatusObject"
      minItems: 1
    PrivacyStatusObject:
      type: object
      required:
        - scopes
        - purpose
        - consentRequired
        - consentStatus
      properties:
        scopes:
          $ref: "#/components/schemas/Scopes"
        purpose:
          $ref: "#/components/schemas/Purpose"
        consentRequired:
          type: boolean
          description: |
            * `true` - The Consent is required for the requested scope(s) and Purpose.
            * `false` - The Consent is not required for the requested scope(s) and Purpose.
        consentStatus:
          type: string
          enum:
            - PENDING
            - ACTIVE
            - REVOKED
            - EXPIRED
          description: |
            Consent status. This field is only present if `consentRequired` is `true`, in which case it becomes mandatory.
            - `PENDING`: The User has not provided the necessary Consent yet.
            - `ACTIVE`: The User has provided the necessary Consent.
            - `REVOKED`: The User has revoked the necessary Consent.
            - `EXPIRED`: The Consent provided by the User has expired.
    ErrorInfo:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP response status code
        code:
          type: string
          description: Friendly Code to describe the error
        message:
          type: string
          description: A human readable description of what the event represent
  responses:
    Generic400:
      description: Bad Request
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Client specified an invalid argument, request body or query param.
    Generic401:
      description: Unauthorized
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 401
                  code:
                    enum:
                      - UNAUTHENTICATED
          examples:
            GENERIC_401_UNAUTHENTICATED:
              description: Request cannot be authenticated
              value:
                status: 401
                code: UNAUTHENTICATED
                message: Request not authenticated due to missing, invalid, or expired credentials.
    verifyConsentStatus403:
      description: Forbidden
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 403
                  code:
                    enum:
                      - PERMISSION_DENIED
                      - CONSENT_INFO.NOT_ALLOWED_SCOPES
                      - CONSENT_INFO.CAPTURE_FREQUENCY_EXCEEDED
          examples:
            GENERIC_403_PERMISSION_DENIED:
              description: Permission denied. OAuth2 token access does not have the required scope or when the user fails operational security
              value:
                status: 403
                code: PERMISSION_DENIED
                message: Client does not have sufficient permissions to perform this action.
            NOT_ALLOWED_SCOPES:
              description: The requested scope(s) and Purpose combination is not allowed for the API Consumer, e.g. the API Consumer has not onboarded the appropriate API(s) with the API Provider for the declared Purpose.
              value:
                status: 403
                code: CONSENT_INFO.NOT_ALLOWED_SCOPES
                message: The requested scope(s) and Purpose combination is not allowed for this API Consumer.
            CAPTURE_FREQUENCY_EXCEEDED:
              description: The frequency of consent capture requests has been exceeded.
              value:
                status: 403
                code: CONSENT_INFO.CAPTURE_FREQUENCY_EXCEEDED
                message: The frequency of consent capture requests has been exceeded. Please try again later.
    Generic404:
      description: Not found
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 404
                  code:
                    enum:
                      - NOT_FOUND
                      - IDENTIFIER_NOT_FOUND
          examples:
            GENERIC_404_NOT_FOUND:
              description: Resource is not found
              value:
                status: 404
                code: NOT_FOUND
                message: The specified resource is not found.
            GENERIC_404_IDENTIFIER_NOT_FOUND:
              description: Some identifier cannot be matched to a device
              value:
                status: 404
                code: IDENTIFIER_NOT_FOUND
                message: Phone number not found.
    Generic422:
      description: Unprocessable Content
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 422
                  code:
                    enum:
                      - SERVICE_NOT_APPLICABLE
                      - MISSING_IDENTIFIER
                      - UNNECESSARY_IDENTIFIER
          examples:
            GENERIC_422_SERVICE_NOT_APPLICABLE:
              description: Service not applicable for the provided identifier
              value:
                status: 422
                code: SERVICE_NOT_APPLICABLE
                message: The service is not available for the provided phone number.
            GENERIC_422_MISSING_IDENTIFIER:
              description: An identifier is not included in the request and the device or phone number identification cannot be derived from the 3-legged access token
              value:
                status: 422
                code: MISSING_IDENTIFIER
                message: The phone number cannot be identified.
            GENERIC_422_UNNECESSARY_IDENTIFIER:
              description: An explicit identifier is provided when a device or phone number has already been identified from the access token
              value:
                status: 422
                code: UNNECESSARY_IDENTIFIER
                message: The phone number is already identified by the access token.
  securitySchemes:
    openId:
      type: openIdConnect
      openIdConnectUrl: https://example.org/.well-known/openid-configuration
